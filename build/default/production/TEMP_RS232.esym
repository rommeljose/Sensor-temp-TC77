D G "__PCH__" 0 0 ""5.036""
D G "__DEVICE__" 0 0 ""
D G "__DATE__" 0 0 ""25-ene.-21""
D G "__TIME__" 0 0 ""13:45:50""
D G "??0" 0 0 ""
D G "__18F25K20" 0 0 "1" "Standard Header file for the PIC18F25K20 device ////////////////"
c L "set_tris_a" 1 3 6 "FUNCTION"
f N "set_tris_a" 1 43 ""
v L "value" 1 43 "int8" `54 
f B "set_tris_a" 1 43 "void(int8 value)" `53 
f N "set_tris_b" 1 44 ""
v L "value" 1 44 "int8" `56 
f B "set_tris_b" 1 44 "void(int8 value)" `55 
f N "set_tris_c" 1 45 ""
v L "value" 1 45 "int8" `58 
f B "set_tris_c" 1 45 "void(int8 value)" `57 
f N "set_tris_e" 1 46 ""
v L "value" 1 46 "int8" `60 
f B "set_tris_e" 1 46 "void(int8 value)" `59 
f N "get_tris_a" 1 47 ""
f B "get_tris_a" 1 47 "int8()" `61 
f N "get_tris_b" 1 48 ""
f B "get_tris_b" 1 48 "int8()" `62 
f N "get_tris_c" 1 49 ""
f B "get_tris_c" 1 49 "int8()" `63 
f N "get_tris_e" 1 50 ""
f B "get_tris_e" 1 50 "int8()" `64 
f N "output_a" 1 51 ""
v L "value" 1 51 "int8" `66 
f B "output_a" 1 51 "void(int8 value)" `65 
f N "output_b" 1 52 ""
v L "value" 1 52 "int8" `68 
f B "output_b" 1 52 "void(int8 value)" `67 
f N "output_c" 1 53 ""
v L "value" 1 53 "int8" `70 
f B "output_c" 1 53 "void(int8 value)" `69 
f N "output_e" 1 54 ""
v L "value" 1 54 "int8" `72 
f B "output_e" 1 54 "void(int8 value)" `71 
f N "input_a" 1 55 ""
f B "input_a" 1 55 "int8()" `73 
f N "input_b" 1 56 ""
f B "input_b" 1 56 "int8()" `74 
f N "input_c" 1 57 ""
f B "input_c" 1 57 "int8()" `75 
f N "input_e" 1 58 ""
f B "input_e" 1 58 "int8()" `76 
f N "input_change_a" 1 59 ""
f B "input_change_a" 1 59 "int8()" `77 
f N "input_change_b" 1 60 ""
f B "input_change_b" 1 60 "int8()" `78 
f N "input_change_c" 1 61 ""
f B "input_change_c" 1 61 "int8()" `79 
f N "input_change_e" 1 62 ""
f B "input_change_e" 1 62 "int8()" `80 
f N "port_b_pullups" 1 63 ""
v L "upmask" 1 63 "int8" `82 
f B "port_b_pullups" 1 63 "void(int8 upmask)" `81 
f N "input" 1 64 ""
v L "pin" 1 64 "int16" `84 
f B "input" 1 64 "int8(int16 pin)" `83 
f N "input_state" 1 65 ""
v L "pin" 1 65 "int16" `86 
f B "input_state" 1 65 "int8(int16 pin)" `85 
f N "output_low" 1 66 ""
v L "pin" 1 66 "int16" `88 
f B "output_low" 1 66 "void(int16 pin)" `87 
f N "output_high" 1 67 ""
v L "pin" 1 67 "int16" `90 
f B "output_high" 1 67 "void(int16 pin)" `89 
f N "output_toggle" 1 68 ""
v L "pin" 1 68 "int16" `92 
f B "output_toggle" 1 68 "void(int16 pin)" `91 
f N "output_bit" 1 69 ""
v L "pin" 1 69 "int16" `94 
v L "level" 1 69 "int8" `95 
f B "output_bit" 1 69 "void(int16 pin,int8 level)" `93 
f N "output_float" 1 70 ""
v L "pin" 1 70 "int16" `97 
f B "output_float" 1 70 "void(int16 pin)" `96 
f N "output_drive" 1 71 ""
v L "pin" 1 71 "int16" `99 
f B "output_drive" 1 71 "void(int16 pin)" `98  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 75 "31744"
d G "PIN_A1" 1 76 "31745"
d G "PIN_A2" 1 77 "31746"
d G "PIN_A3" 1 78 "31747"
d G "PIN_A4" 1 79 "31748"
d G "PIN_A5" 1 80 "31749"
d G "PIN_A6" 1 81 "31750"
d G "PIN_A7" 1 82 "31751"
d G "PIN_B0" 1 84 "31752"
d G "PIN_B1" 1 85 "31753"
d G "PIN_B2" 1 86 "31754"
d G "PIN_B3" 1 87 "31755"
d G "PIN_B4" 1 88 "31756"
d G "PIN_B5" 1 89 "31757"
d G "PIN_B6" 1 90 "31758"
d G "PIN_B7" 1 91 "31759"
d G "PIN_C0" 1 93 "31760"
d G "PIN_C1" 1 94 "31761"
d G "PIN_C2" 1 95 "31762"
d G "PIN_C3" 1 96 "31763"
d G "PIN_C4" 1 97 "31764"
d G "PIN_C5" 1 98 "31765"
d G "PIN_C6" 1 99 "31766"
d G "PIN_C7" 1 100 "31767"
d G "PIN_E3" 1 102 "31779"
d G "FALSE" 1 105 "0"
d G "TRUE" 1 106 "1"
d G "BYTE" 1 108 "int8"
d G "BOOLEAN" 1 109 "int1"
d G "getc" 1 111 "getch"
d G "fgetc" 1 112 "getch"
d G "getchar" 1 113 "getch"
d G "putc" 1 114 "putchar"
d G "fputc" 1 115 "putchar"
d G "fgets" 1 116 "gets"
d G "fputs" 1 117 "puts"
c L "output_drive" 1 3 3 "FUNCTION"
f N "restart_cause" 1 122 ""
f B "restart_cause" 1 122 "int8()" `100 
f N "reset_cpu" 1 123 ""
f B "reset_cpu" 1 123 "void()" `101 
f N "sleep" 1 124 ""
f B "sleep" 1 124 "void()" `102 
f N "sleep" 1 125 ""
v L "type" 1 125 "int8" `104 
f G "sleep" 1 125 "void(int8 type)" `103  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 1 127 "7"
d G "MCLR_FROM_SLEEP" 1 128 "11"
d G "MCLR_FROM_RUN" 1 129 "15"
d G "NORMAL_POWER_UP" 1 130 "12"
d G "BROWNOUT_RESTART" 1 131 "14"
d G "WDT_FROM_SLEEP" 1 132 "3"
d G "RESET_INSTRUCTION" 1 133 "0"
d G "SLEEP_FULL" 1 136 "0" "Default"
d G "SLEEP_IDLE" 1 137 "1" "Clock and peripherals don't stop"
c L "sleep" 1 3 5 "FUNCTION"
f N "setup_timer_0" 1 144 ""
v L "mode" 1 144 "int8" `106 
f B "setup_timer_0" 1 144 "void(int8 mode)" `105 
f N "set_timer0" 1 145 ""
v L "value" 1 145 "int16" `108 
f B "set_timer0" 1 145 "void(int16 value)" `107 
f N "get_timer0" 1 146 ""
f B "get_timer0" 1 146 "int16()" `109 
f N "setup_counters" 1 147 ""
v L "mode" 1 147 "int8" `111 
v L "prescaler" 1 147 "int8" `112 
f B "setup_counters" 1 147 "void(int8 mode,int8 prescaler)" `110 
f N "set_rtcc" 1 148 ""
v L "value" 1 148 "int16" `114 
f B "set_rtcc" 1 148 "void(int16 value)" `113 
f N "get_rtcc" 1 149 ""
f B "get_rtcc" 1 149 "int16()" `115  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 1 151 "0"
d G "T0_EXT_L_TO_H" 1 152 "32"
d G "T0_EXT_H_TO_L" 1 153 "48"
d G "T0_DIV_1" 1 155 "8"
d G "T0_DIV_2" 1 156 "0"
d G "T0_DIV_4" 1 157 "1"
d G "T0_DIV_8" 1 158 "2"
d G "T0_DIV_16" 1 159 "3"
d G "T0_DIV_32" 1 160 "4"
d G "T0_DIV_64" 1 161 "5"
d G "T0_DIV_128" 1 162 "6"
d G "T0_DIV_256" 1 163 "7"
d G "T0_OFF" 1 165 "0x80"
d G "T0_8_BIT" 1 167 "0x40"
d G "RTCC_INTERNAL" 1 169 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 1 170 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 1 171 "48"
d G "RTCC_DIV_1" 1 172 "8"
d G "RTCC_DIV_2" 1 173 "0"
d G "RTCC_DIV_4" 1 174 "1"
d G "RTCC_DIV_8" 1 175 "2"
d G "RTCC_DIV_16" 1 176 "3"
d G "RTCC_DIV_32" 1 177 "4"
d G "RTCC_DIV_64" 1 178 "5"
d G "RTCC_DIV_128" 1 179 "6"
d G "RTCC_DIV_256" 1 180 "7"
d G "RTCC_OFF" 1 181 "0x80"
d G "RTCC_8_BIT" 1 182 "0x40"
c L "get_rtcc" 1 3 8 "FUNCTION"
f N "setup_wdt" 1 193 ""
v L "mode" 1 193 "int16" `117 
f B "setup_wdt" 1 193 "void(int16 mode)" `116 
f N "restart_wdt" 1 194 ""
f B "restart_wdt" 1 194 "void()" `118  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 1 196 "0x100"
d G "WDT_OFF" 1 197 "0"
d G "WDT_4MS" 1 199 "0x300"
d G "WDT_8MS" 1 200 "0x500"
d G "WDT_16MS" 1 201 "0x700"
d G "WDT_32MS" 1 202 "0x900"
d G "WDT_64MS" 1 203 "0xB00"
d G "WDT_128MS" 1 204 "0xD00"
d G "WDT_256MS" 1 205 "0xF00"
d G "WDT_512MS" 1 206 "0x1100"
d G "WDT_1S" 1 207 "0x1300"
d G "WDT_2S" 1 208 "0x1500"
d G "WDT_4S" 1 209 "0x1700"
d G "WDT_8S" 1 210 "0x1900"
d G "WDT_16" 1 211 "0x1B00"
d G "WDT_32S" 1 212 "0x1D00"
d G "WDT_64S" 1 213 "0x1F00"
d G "WDT_128S" 1 214 "0x2100"
c L "restart_wdt" 1 3 3 "FUNCTION"
f N "setup_timer_1" 1 219 ""
v L "mode" 1 219 "int16" `120 
f B "setup_timer_1" 1 219 "void(int16 mode)" `119 
f N "get_timer1" 1 220 ""
f B "get_timer1" 1 220 "int16()" `121 
f N "set_timer1" 1 221 ""
v L "value" 1 221 "int16" `123 
f B "set_timer1" 1 221 "void(int16 value)" `122  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 1 224 "0"
d G "T1_INTERNAL" 1 225 "0x85"
d G "T1_EXTERNAL" 1 226 "0x87"
d G "T1_EXTERNAL_SYNC" 1 227 "0x83"
d G "T1_CLK_OUT" 1 229 "8"
d G "T1_DIV_BY_1" 1 231 "0"
d G "T1_DIV_BY_2" 1 232 "0x10"
d G "T1_DIV_BY_4" 1 233 "0x20"
d G "T1_DIV_BY_8" 1 234 "0x30"
c L "set_timer1" 1 3 3 "FUNCTION"
f N "setup_timer_2" 1 239 ""
v L "mode" 1 239 "int8" `125 
v L "period" 1 239 "int8" `126 
v L "postscale" 1 239 "int8" `127 
f B "setup_timer_2" 1 239 "void(int8 mode,int8 period,int8 postscale)" `124 
f N "get_timer2" 1 240 ""
f B "get_timer2" 1 240 "int8()" `128 
f N "set_timer2" 1 241 ""
v L "value" 1 241 "int8" `130 
f B "set_timer2" 1 241 "void(int8 value)" `129  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 1 243 "0"
d G "T2_DIV_BY_1" 1 244 "4"
d G "T2_DIV_BY_4" 1 245 "5"
d G "T2_DIV_BY_16" 1 246 "6"
c L "set_timer2" 1 3 3 "FUNCTION"
f N "setup_timer_3" 1 251 ""
v L "mode" 1 251 "int16" `132 
f B "setup_timer_3" 1 251 "void(int16 mode)" `131 
f N "get_timer3" 1 252 ""
f B "get_timer3" 1 252 "int16()" `133 
f N "set_timer3" 1 253 ""
v L "value" 1 253 "int16" `135 
f B "set_timer3" 1 253 "void(int16 value)" `134  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 1 256 "0"
d G "T3_INTERNAL" 1 257 "0x85"
d G "T3_EXTERNAL" 1 258 "0x87"
d G "T3_EXTERNAL_SYNC" 1 259 "0x83"
d G "T3_DIV_BY_1" 1 261 "0"
d G "T3_DIV_BY_2" 1 262 "0x10"
d G "T3_DIV_BY_4" 1 263 "0x20"
d G "T3_DIV_BY_8" 1 264 "0x30"
d G "T3_CCP1_TO_2" 1 267 "0x48"
d G "T3_CCP2" 1 268 "0x8"
c L "set_timer3" 1 3 4 "FUNCTION"
f N "setup_ccp1" 1 274 ""
v L "mode" 1 274 "int32" `137 
f B "setup_ccp1" 1 274 "void(int32 mode)" `136 
f N "setup_ccp1" 1 275 ""
v L "mode" 1 275 "int32" `139 
v L "pwm" 1 275 "int8" `140 
f G "setup_ccp1" 1 275 "void(int32 mode,int8 pwm)" `138 
f N "set_pwm1_duty" 1 276 ""
v L "value" 1 276 "int16" `142 
f B "set_pwm1_duty" 1 276 "void(int16 value)" `141  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 1 278 "0"
d G "CCP_CAPTURE_FE" 1 279 "0x04"
d G "CCP_CAPTURE_RE" 1 280 "0x05"
d G "CCP_CAPTURE_DIV_4" 1 281 "0x06"
d G "CCP_CAPTURE_DIV_16" 1 282 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 1 283 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 1 284 "0x09"
d G "CCP_COMPARE_INT" 1 285 "0x0A"
d G "CCP_COMPARE_INT_AND_TOGGLE" 1 286 "0x02"
d G "CCP_COMPARE_RESET_TIMER" 1 287 "0x0B"
d G "CCP_PWM" 1 288 "0x0C"
d G "CCP_PWM_PLUS_1" 1 289 "0x1c"
d G "CCP_PWM_PLUS_2" 1 290 "0x2c"
d G "CCP_PWM_PLUS_3" 1 291 "0x3c"
c L "set_pwm1_duty" 1 3 1 "FUNCTION"
d G "CCP_PWM_H_H" 1 298 "0x0c"
d G "CCP_PWM_H_L" 1 299 "0x0d"
d G "CCP_PWM_L_H" 1 300 "0x0e"
d G "CCP_PWM_L_L" 1 301 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 1 303 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 1 304 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 1 305 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 1 307 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 1 308 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 1 309 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 1 310 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 1 311 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 1 312 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 1 313 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 1 315 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 1 316 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 1 317 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 1 319 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 1 320 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 1 321 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 1 323 "0x80000000"
d G "CCP_PULSE_STEERING_A" 1 325 "0x01000000"
d G "CCP_PULSE_STEERING_B" 1 326 "0x02000000"
d G "CCP_PULSE_STEERING_C" 1 327 "0x04000000"
d G "CCP_PULSE_STEERING_D" 1 328 "0x08000000"
d G "CCP_PULSE_STEERING_SYNC" 1 329 "0x10000000"
c L "set_pwm1_duty" 1 3 1 "FUNCTION"
f N "setup_ccp2" 1 333 ""
v L "mode" 1 333 "int32" `147 
f B "setup_ccp2" 1 333 "void(int32 mode)" `146 
f N "setup_ccp2" 1 334 ""
v L "mode" 1 334 "int32" `149 
v L "pwm" 1 334 "int8" `150 
f G "setup_ccp2" 1 334 "void(int32 mode,int8 pwm)" `148 
f N "set_pwm2_duty" 1 335 ""
v L "value" 1 335 "int16" `152 
f B "set_pwm2_duty" 1 335 "void(int16 value)" `151 
c L "set_pwm2_duty" 1 3 3 "FUNCTION"
f N "setup_spi" 1 342 ""
v L "mode" 1 342 "int32" `157 
f B "setup_spi" 1 342 "void(int32 mode)" `156 
f N "spi_write" 1 343 ""
v L "value" 1 343 "int8" `159 
f B "spi_write" 1 343 "void(int8 value)" `158 
f N "spi_read" 1 344 ""
f B "spi_read" 1 344 "int8()" `160 
f N "spi_read" 1 345 ""
v L "value" 1 345 "int8" `162 
f G "spi_read" 1 345 "int8(int8 value)" `161 
f N "spi_data_in" 1 346 ""
f B "spi_data_in" 1 346 "int8()" `163 
f N "setup_spi2" 1 347 ""
v L "mode" 1 347 "int32" `165 
f B "setup_spi2" 1 347 "void(int32 mode)" `164 
f N "spi_write2" 1 348 ""
v L "value" 1 348 "int8" `167 
f B "spi_write2" 1 348 "void(int8 value)" `166 
f N "spi_read2" 1 349 ""
f B "spi_read2" 1 349 "int8()" `168 
f N "spi_read2" 1 350 ""
v L "value" 1 350 "int8" `170 
f G "spi_read2" 1 350 "int8(int8 value)" `169 
f N "spi_data_in2" 1 351 ""
f B "spi_data_in2" 1 351 "int8()" `171  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 1 353 "0x00"
d G "SPI_MASTER" 1 354 "0x20"
d G "SPI_SLAVE" 1 355 "0x24"
d G "SPI_SCK_IDLE_HIGH" 1 356 "0x10"
d G "SPI_SCK_IDLE_LOW" 1 357 "0x00"
d G "SPI_CLK_DIV_4" 1 358 "0x00"
d G "SPI_CLK_DIV_16" 1 359 "0x01"
d G "SPI_CLK_DIV_64" 1 360 "0x02"
d G "SPI_CLK_T2" 1 361 "0x03"
d G "SPI_SS_DISABLED" 1 362 "0x01"
d G "SPI_XMIT_L_TO_H" 1 364 "0x4000"
d G "SPI_XMIT_H_TO_L" 1 365 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 1 367 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 368 "0x8000"
d G "SPI_L_TO_H" 1 371 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 372 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in2" 1 3 2 "FUNCTION"
f N "setup_uart" 1 376 ""
v L "baud" 1 376 "int32" `173 
f B "setup_uart" 1 376 "void(int32 baud)" `172 
f N "setup_uart" 1 377 ""
v L "baud" 1 377 "int32" `175 
v L "stream" 1 377 "int8" `176 
f G "setup_uart" 1 377 "void(int32 baud,int8 stream)" `174 
f N "setup_uart" 1 378 ""
v L "baud" 1 378 "int32" `178 
v L "stream" 1 378 "int8" `179 
v L "clock" 1 378 "int32" `180 
f G "setup_uart" 1 378 "void(int32 baud,int8 stream,int32 clock)" `177 
f N "set_uart_speed" 1 379 ""
v L "baud" 1 379 "int32" `182 
f B "set_uart_speed" 1 379 "void(int32 baud)" `181 
f N "set_uart_speed" 1 380 ""
v L "baud" 1 380 "int32" `184 
v L "stream" 1 380 "int8" `185 
f G "set_uart_speed" 1 380 "void(int32 baud,int8 stream)" `183 
f N "set_uart_speed" 1 381 ""
v L "baud" 1 381 "int32" `187 
v L "stream" 1 381 "int8" `188 
v L "clock" 1 381 "int32" `189 
f G "set_uart_speed" 1 381 "void(int32 baud,int8 stream,int32 clock)" `186  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 385 "2"
d G "UART_DATA" 1 386 "4"
d G "UART_AUTODETECT" 1 387 "8"
d G "UART_AUTODETECT_NOWAIT" 1 388 "9"
d G "UART_WAKEUP_ON_RDA" 1 389 "10"
d G "UART_SEND_BREAK" 1 390 "13"
c L "set_uart_speed" 1 3 3 "FUNCTION"
f N "setup_comparator" 1 394 ""
v L "mode" 1 394 "int32" `191 
f B "setup_comparator" 1 394 "void(int32 mode)" `190  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 1 397 "0x404"
d G "NC_NC" 1 398 "0x404"
d G "CP1_A0_A3" 1 401 "0x4000088"
d G "CP1_A1_A3" 1 402 "0x0100089"
d G "CP1_B3_A3" 1 403 "0x020008A"
d G "CP1_B1_A3" 1 404 "0x040008B"
d G "CP1_A0_VREF" 1 405 "0x400008C"
d G "CP1_A1_VREF" 1 406 "0x010008D"
d G "CP1_B3_VREF" 1 407 "0x020008E"
d G "CP1_B1_VREF" 1 408 "0x040008F"
d G "CP1_OUT_ON_A4" 1 410 "0x2000020"
d G "CP1_INVERT" 1 411 "0x0000010"
d G "CP1_FAST" 1 412 "0x0000008"
d G "CP2_A0_A2" 1 415 "0x4008800"
d G "CP2_A1_A2" 1 416 "0x0108900"
d G "CP2_B3_A2" 1 417 "0x0208A00"
d G "CP2_B1_A2" 1 418 "0x0408B00"
d G "CP2_A0_VREF" 1 419 "0x4008C00"
d G "CP2_A1_VREF" 1 420 "0x0108D00"
d G "CP2_B3_VREF" 1 421 "0x0208E00"
d G "CP2_B1_VREF" 1 422 "0x0408F00"
d G "CP2_OUT_ON_A5" 1 424 "0x0082000"
d G "CP2_INVERT" 1 425 "0x0001000"
d G "CP2_FAST" 1 426 "0x0000800"
c L "setup_comparator" 1 3 2 "FUNCTION"
f N "setup_vref" 1 433 ""
v L "mode" 1 433 "int16" `195 
f B "setup_vref" 1 433 "void(int16 mode)" `194  "Constants used in setup_vref() are:"
d G "VREF_LOW" 1 435 "0xA0"
d G "VREF_HIGH" 1 436 "0x80"
d G "VREF_EXT" 1 437 "0x10" "Range for ref gen VREF- to VREF+"
d G "VREF_FVR" 1 438 "0x8000"
c L "setup_vref" 1 3 3 "FUNCTION"
f N "setup_low_volt_detect" 1 443 ""
v L "mode" 1 443 "int8" `197 
f B "setup_low_volt_detect" 1 443 "void(int8 mode)" `196  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 1 445 "0x1F"
d G "LVD_35" 1 446 "0x1E"
d G "LVD_33" 1 447 "0x1D"
d G "LVD_30" 1 448 "0x1C"
d G "LVD_29" 1 449 "0x1B"
d G "LVD_28" 1 450 "0x1A"
d G "LVD_27" 1 451 "0x19"
d G "LVD_26" 1 452 "0x18"
d G "LVD_25" 1 453 "0x17"
d G "LVD_24" 1 454 "0x16"
d G "LVD_23" 1 455 "0x15"
d G "LVD_22" 1 456 "0x14"
d G "LVD_21" 1 457 "0x13"
d G "LVD_20" 1 458 "0x12"
d G "LVD_19" 1 459 "0x11"
d G "LVD_18" 1 460 "0x10"
d G "LVD_TRIGGER_BELOW" 1 462 "0"
d G "LVD_TRIGGER_ABOVE" 1 463 "0x80"
d G "LVD_INTERRUPT" 1 464 "0x20"
c L "setup_low_volt_detect" 1 3 2 "FUNCTION"
f N "setup_oscillator" 1 469 ""
v L "mode" 1 469 "int16" `199 
f B "setup_oscillator" 1 469 "int8(int16 mode)" `198 
f N "setup_oscillator" 1 470 ""
v L "mode" 1 470 "int16" `201 
v L "tune" 1 470 "sint8" `202 
f G "setup_oscillator" 1 470 "int8(int16 mode,sint8 tune)" `200  "Constants used in setup_oscillator() are:"
d G "OSC_PLL_ON" 1 472 "0x4000"
d G "OSC_PLL_OFF" 1 473 "0"
d G "OSC_31250" 1 474 "0x8000"
d G "OSC_31KHZ" 1 475 "0x00"
d G "OSC_250KHZ" 1 476 "0x10"
d G "OSC_500KHZ" 1 477 "0x20"
d G "OSC_1MHZ" 1 478 "0x30"
d G "OSC_2MHZ" 1 479 "0x40"
d G "OSC_4MHZ" 1 480 "0x50"
d G "OSC_8MHZ" 1 481 "0x60"
d G "OSC_16MHZ" 1 482 "0x70"
d G "OSC_32MHZ" 1 483 "0x4060"
d G "OSC_64MHZ" 1 484 "0x4070"
d G "OSC_TIMER1" 1 486 "1"
d G "OSC_INTRC" 1 487 "2"
d G "OSC_NORMAL" 1 488 "0"
d G "OSC_IDLE_MODE" 1 490 "0x80"
d G "OSC_STATE_STABLE" 1 494 "4"
d G "OSC_STATE_EXT_RUNNING" 1 495 "8"
c L "setup_oscillator" 1 3 4 "FUNCTION"
f N "setup_adc" 1 502 ""
v L "mode" 1 502 "int16" `204 
f B "setup_adc" 1 502 "void(int16 mode)" `203 
f N "read_adc" 1 503 ""
f B "read_adc" 1 503 "int8()" `205 
f N "read_adc" 1 504 ""
v L "mode" 1 504 "int8" `207 
f G "read_adc" 1 504 "int8(int8 mode)" `206 
f N "read_adc" 1 505 ""
f G "read_adc" 1 505 "int16()" `208 
f N "read_adc" 1 506 ""
v L "mode" 1 506 "int8" `210 
f G "read_adc" 1 506 "int16(int8 mode)" `209 
f N "adc_done" 1 507 ""
f B "adc_done" 1 507 "int8()" `211  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 509 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 1 510 "0x100"
d G "ADC_CLOCK_DIV_4" 1 511 "0x04"
d G "ADC_CLOCK_DIV_8" 1 512 "0x01"
d G "ADC_CLOCK_DIV_16" 1 513 "0x05"
d G "ADC_CLOCK_DIV_32" 1 514 "0x02"
d G "ADC_CLOCK_DIV_64" 1 515 "0x06"
d G "ADC_CLOCK_INTERNAL" 1 516 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 1 518 "0x00"
d G "ADC_TAD_MUL_2" 1 519 "0x08"
d G "ADC_TAD_MUL_4" 1 520 "0x10"
d G "ADC_TAD_MUL_6" 1 521 "0x18"
d G "ADC_TAD_MUL_8" 1 522 "0x20"
d G "ADC_TAD_MUL_12" 1 523 "0x28"
d G "ADC_TAD_MUL_16" 1 524 "0x30"
d G "ADC_TAD_MUL_20" 1 525 "0x38"
c L "adc_done" 1 3 1 "FUNCTION"
f N "setup_adc_ports" 1 528 ""
v L "pins" 1 528 "int32" `213 
f B "setup_adc_ports" 1 528 "void(int32 pins)" `212 
f N "setup_adc_ports" 1 529 ""
v L "pins" 1 529 "int32" `215 
v L "reference" 1 529 "int32" `216 
f G "setup_adc_ports" 1 529 "void(int32 pins,int32 reference)" `214 
f N "set_analog_pins" 1 530 ""
v L "pins" 1 530 "int32" `218 
f B "set_analog_pins" 1 530 "void(int32 pins)" `217 
f N "set_analog_pins" 1 531 ""
v L "pins" 1 531 "int32" `220 
v L "reference" 1 531 "int32" `221 
f G "set_analog_pins" 1 531 "void(int32 pins,int32 reference)" `219 
f N "set_adc_channel" 1 532 ""
v L "channel" 1 532 "int8" `223 
f B "set_adc_channel" 1 532 "void(int8 channel)" `222  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
d G "sAN0" 1 536 "0x10000" "| A0"
d G "sAN1" 1 537 "0x20000" "| A1"
d G "sAN2" 1 538 "0x40000" "| A2"
d G "sAN3" 1 539 "0x80000" "| A3"
d G "sAN4" 1 540 "0x100000" "| A5"
d G "sAN5" 1 541 "0x200000" "| E0"
d G "sAN6" 1 542 "0x400000" "| E1"
d G "sAN7" 1 543 "0x800000" "| E2"
d G "sAN8" 1 544 "0x1" "| B2"
d G "sAN9" 1 545 "0x2" "| B3"
d G "sAN10" 1 546 "0x4" "| B1"
d G "sAN11" 1 547 "0x8" "| B4"
d G "sAN12" 1 548 "0x10" "| B0"
d G "NO_ANALOGS" 1 549 "0" "None"
d G "ALL_ANALOG" 1 550 "0xFF001F" "A0 A1 A2 A3 A5 E0 E1 E2 B0 B1 B2 B3 B4 B5"
d G "VSS_VDD" 1 553 "0x0000" "| Range 0-Vdd"
d G "VSS_VREF" 1 554 "0x1000" "| Range 0-Vref"
d G "VREF_VREF" 1 555 "0x3000" "| Range Vref-Vref"
d G "VREF_VDD" 1 556 "0x2000" "| Range Vref-Vdd"
d G "ADC_START_AND_READ" 1 559 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 1 560 "1"
d G "ADC_READ_ONLY" 1 561 "6"
c L "set_adc_channel" 1 3 3 "FUNCTION"
f N "abs" 1 567 ""
v L "x" 1 567 "sint8" `225 
f B "abs" 1 567 "sint8(sint8 x)" `224 
f N "abs" 1 568 ""
v L "x" 1 568 "sint16" `227 
f G "abs" 1 568 "sint16(sint16 x)" `226 
f N "abs" 1 569 ""
v L "x" 1 569 "sint32" `229 
f G "abs" 1 569 "sint32(sint32 x)" `228 
f N "abs" 1 570 ""
v L "x" 1 570 "float" `231 
f G "abs" 1 570 "float(float x)" `230 
f N "_mul" 1 571 ""
v L "??65535" 1 571 "int8" `233 
v L "??65535" 1 571 "int8" `234 
f B "_mul" 1 571 "int16(int8 ,int8 )" `232 
f N "_mul" 1 572 ""
v L "??65535" 1 572 "sint8" `233 
v L "??65535" 1 572 "sint8" `237 
f G "_mul" 1 572 "sint16(sint8 ,sint8 )" `235 
f N "_mul" 1 573 ""
v L "??65535" 1 573 "int16" `233 
v L "??65535" 1 573 "int16" `240 
f G "_mul" 1 573 "int32(int16 ,int16 )" `238 
f N "_mul" 1 574 ""
v L "??65535" 1 574 "sint16" `233 
v L "??65535" 1 574 "sint16" `243 
f G "_mul" 1 574 "sint32(sint16 ,sint16 )" `241  "Memory Manipulation Prototypes:"
f N "read_bank" 1 577 ""
v L "bank" 1 577 "int8" `245 
v L "offset" 1 577 "int8" `246 
f B "read_bank" 1 577 "int8(int8 bank,int8 offset)" `244 
f N "write_bank" 1 578 ""
v L "bank" 1 578 "int8" `248 
v L "offset" 1 578 "int8" `249 
v L "value" 1 578 "int8" `250 
f B "write_bank" 1 578 "void(int8 bank,int8 offset,int8 value)" `247 
f N "strcpy" 1 579 ""
v L "dest" 1 579 "*int8" `252 
v L "src" 1 579 "*int8" `253 
f B "strcpy" 1 579 "void(*int8 dest,*int8 src)" `251 
f N "memset" 1 580 ""
v L "destination" 1 580 "*int8" `255 
v L "value" 1 580 "int8" `256 
v L "num" 1 580 "int16" `257 
f B "memset" 1 580 "void(*int8 destination,int8 value,int16 num)" `254 
f N "memcpy" 1 581 ""
v L "destination" 1 581 "*int8" `259 
v L "source" 1 581 "*int8" `260 
v L "num" 1 581 "int16" `261 
f B "memcpy" 1 581 "void(*int8 destination,*int8 source,int16 num)" `258  "String Prototypes:"
f N "toupper" 1 584 ""
v L "cvalue" 1 584 "int8" `263 
f B "toupper" 1 584 "int8(int8 cvalue)" `262 
f N "tolower" 1 585 ""
v L "cvalue" 1 585 "int8" `265 
f B "tolower" 1 585 "int8(int8 cvalue)" `264 
f N "sprintf" 1 586 ""
v L "string" 1 586 "*int8" `267 
v L "cstring" 1 586 "*int8" `268 
f B "sprintf" 1 586 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `266  "Data Manipulators Prototypes:"
f N "shift_left" 1 589 ""
v L "address" 1 589 "*int8" `271 
v L "bytes" 1 589 "int8" `272 
v L "value" 1 589 "int8" `273 
f B "shift_left" 1 589 "int8(*int8 address,int8 bytes,int8 value)" `270 
f N "shift_right" 1 590 ""
v L "address" 1 590 "*int8" `275 
v L "bytes" 1 590 "int8" `276 
v L "value" 1 590 "int8" `277 
f B "shift_right" 1 590 "int8(*int8 address,int8 bytes,int8 value)" `274 
f N "rotate_left" 1 591 ""
v L "address" 1 591 "*int8" `279 
v L "bytes" 1 591 "int8" `280 
f B "rotate_left" 1 591 "void(*int8 address,int8 bytes)" `278 
f N "rotate_right" 1 592 ""
v L "address" 1 592 "*int8" `282 
v L "bytes" 1 592 "int8" `283 
f B "rotate_right" 1 592 "void(*int8 address,int8 bytes)" `281 
f N "swap" 1 593 ""
v L "value" 1 593 "int8" `285 
f B "swap" 1 593 "void(int8 value)" `284 
f N "make8" 1 594 ""
v L "var" 1 594 "int16" `287 
v L "offset" 1 594 "int8" `288 
f B "make8" 1 594 "int8(int16 var,int8 offset)" `286 
f N "make8" 1 595 ""
v L "var" 1 595 "int32" `287 
v L "offset" 1 595 "int8" `291 
f G "make8" 1 595 "int8(int32 var,int8 offset)" `289 
f N "make16" 1 596 ""
v L "varhigh" 1 596 "int8" `293 
v L "varlow" 1 596 "int8" `294 
f B "make16" 1 596 "int16(int8 varhigh,int8 varlow)" `292 
f N "make32" 1 597 ""
v L "var1" 1 597 "int16" `296 
f B "make32" 1 597 "int32(int16 var1)" `295 
f N "make32" 1 598 ""
v L "var1" 1 598 "int16" `298 
v L "var2" 1 598 "int16" `299 
f G "make32" 1 598 "int32(int16 var1,int16 var2)" `297 
f N "make32" 1 599 ""
v L "var1" 1 599 "int16" `298 
v L "var2" 1 599 "int8" `302 
f G "make32" 1 599 "int32(int16 var1,int8 var2)" `300 
f N "make32" 1 600 ""
v L "var1" 1 600 "int16" `304 
v L "var2" 1 600 "int8" `305 
v L "var3" 1 600 "int8" `306 
f G "make32" 1 600 "int32(int16 var1,int8 var2,int8 var3)" `303 
f N "make32" 1 601 ""
v L "var1" 1 601 "int8" `308 
f G "make32" 1 601 "int32(int8 var1)" `307 
f N "make32" 1 602 ""
v L "var1" 1 602 "int8" `298 
v L "var2" 1 602 "int8" `311 
f G "make32" 1 602 "int32(int8 var1,int8 var2)" `309 
f N "make32" 1 603 ""
v L "var1" 1 603 "int8" `304 
v L "var2" 1 603 "int8" `305 
v L "var3" 1 603 "int8" `315 
f G "make32" 1 603 "int32(int8 var1,int8 var2,int8 var3)" `312 
f N "make32" 1 604 ""
v L "var1" 1 604 "int8" `317 
v L "var2" 1 604 "int8" `318 
v L "var3" 1 604 "int8" `319 
v L "var4" 1 604 "int8" `320 
f G "make32" 1 604 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `316 
f N "make32" 1 605 ""
v L "var1" 1 605 "int8" `298 
v L "var2" 1 605 "int16" `323 
f G "make32" 1 605 "int32(int8 var1,int16 var2)" `321 
f N "make32" 1 606 ""
v L "var1" 1 606 "int8" `304 
v L "var2" 1 606 "int16" `305 
v L "var3" 1 606 "int8" `327 
f G "make32" 1 606 "int32(int8 var1,int16 var2,int8 var3)" `324 
f N "make32" 1 607 ""
v L "var1" 1 607 "int8" `304 
v L "var2" 1 607 "int8" `305 
v L "var3" 1 607 "int16" `331 
f G "make32" 1 607 "int32(int8 var1,int8 var2,int16 var3)" `328 
f N "bit_set" 1 608 ""
v L "var" 1 608 "int8" `333 
v L "bit" 1 608 "int8" `334 
f B "bit_set" 1 608 "void(int8 var,int8 bit)" `332 
f N "bit_set" 1 609 ""
v L "var" 1 609 "int16" `333 
v L "bit" 1 609 "int8" `337 
f G "bit_set" 1 609 "void(int16 var,int8 bit)" `335 
f N "bit_set" 1 610 ""
v L "var" 1 610 "int32" `333 
v L "bit" 1 610 "int8" `340 
f G "bit_set" 1 610 "void(int32 var,int8 bit)" `338 
f N "bit_clear" 1 611 ""
v L "var" 1 611 "int8" `342 
v L "bit" 1 611 "int8" `343 
f B "bit_clear" 1 611 "void(int8 var,int8 bit)" `341 
f N "bit_clear" 1 612 ""
v L "var" 1 612 "int16" `342 
v L "bit" 1 612 "int8" `346 
f G "bit_clear" 1 612 "void(int16 var,int8 bit)" `344 
f N "bit_clear" 1 613 ""
v L "var" 1 613 "int32" `342 
v L "bit" 1 613 "int8" `349 
f G "bit_clear" 1 613 "void(int32 var,int8 bit)" `347 
f N "bit_test" 1 614 ""
v L "var" 1 614 "int8" `351 
v L "bit" 1 614 "int8" `352 
f B "bit_test" 1 614 "int8(int8 var,int8 bit)" `350 
f N "bit_test" 1 615 ""
v L "var" 1 615 "int16" `351 
v L "bit" 1 615 "int8" `355 
f G "bit_test" 1 615 "int8(int16 var,int8 bit)" `353 
f N "bit_test" 1 616 ""
v L "var" 1 616 "int32" `351 
v L "bit" 1 616 "int8" `358 
f G "bit_test" 1 616 "int8(int32 var,int8 bit)" `356  "#use delay() Prototypes:"
f N "delay_cycles" 1 619 ""
v L "count" 1 619 "int8" `360 
f B "delay_cycles" 1 619 "void(int8 count)" `359 
f N "delay_ms" 1 620 ""
v L "time" 1 620 "int16" `362 
f B "delay_ms" 1 620 "void(int16 time)" `361 
f N "delay_us" 1 621 ""
v L "time" 1 621 "int16" `364 
f B "delay_us" 1 621 "void(int16 time)" `363  "#use rs232() Prototypes:"
f N "putchar" 1 624 ""
v L "cdata" 1 624 "int8" `366 
f B "putchar" 1 624 "void(int8 cdata)" `365 
f N "putchar" 1 625 ""
v L "cdata" 1 625 "int8" `368 
v L "stream" 1 625 "int8" `369 
f G "putchar" 1 625 "void(int8 cdata,int8 stream)" `367 
f N "puts" 1 626 ""
v L "string" 1 626 "*int8" `371 
f B "puts" 1 626 "void(*int8 string)" `370 
f N "puts" 1 627 ""
v L "string" 1 627 "*int8" `373 
v L "stream" 1 627 "int8" `374 
f G "puts" 1 627 "void(*int8 string,int8 stream)" `372 
f N "getch" 1 628 ""
f B "getch" 1 628 "int8()" `375 
f N "getch" 1 629 ""
v L "stream" 1 629 "int8" `377 
f G "getch" 1 629 "int8(int8 stream)" `376 
f N "gets" 1 630 ""
v L "string" 1 630 "*int8" `379 
f B "gets" 1 630 "void(*int8 string)" `378 
f N "gets" 1 631 ""
v L "string" 1 631 "*int8" `381 
v L "stream" 1 631 "int8" `382 
f G "gets" 1 631 "void(*int8 string,int8 stream)" `380 
f N "kbhit" 1 632 ""
f B "kbhit" 1 632 "int8()" `383 
f N "kbhit" 1 633 ""
v L "stream" 1 633 "int8" `385 
f G "kbhit" 1 633 "int8(int8 stream)" `384 
f N "printf" 1 634 ""
v L "string" 1 634 "*int8" `387 
f B "printf" 1 634 "void(*int8 string,*int8 _VA_LIST)" `386 
f N "fprintf" 1 635 ""
v L "stream" 1 635 "int8" `390 
v L "string" 1 635 "*int8" `391 
f B "fprintf" 1 635 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `389 
f N "putc_send" 1 636 ""
f B "putc_send" 1 636 "void()" `393 
f N "fputc_send" 1 637 ""
v L "stream" 1 637 "int8" `395 
f B "fputc_send" 1 637 "void(int8 stream)" `394 
f N "rcv_buffer_full" 1 638 ""
f B "rcv_buffer_full" 1 638 "int8()" `396 
f N "rcv_buffer_full" 1 639 ""
v L "stream" 1 639 "int8" `398 
f G "rcv_buffer_full" 1 639 "int8(int8 stream)" `397 
f N "rcv_buffer_bytes" 1 640 ""
f B "rcv_buffer_bytes" 1 640 "int16()" `399 
f N "rcv_buffer_bytes" 1 641 ""
v L "stream" 1 641 "int8" `401 
f G "rcv_buffer_bytes" 1 641 "int16(int8 stream)" `400 
f N "tx_buffer_full" 1 642 ""
f B "tx_buffer_full" 1 642 "int8()" `402 
f N "tx_buffer_full" 1 643 ""
v L "stream" 1 643 "int8" `404 
f G "tx_buffer_full" 1 643 "int8(int8 stream)" `403 
f N "tx_buffer_bytes" 1 644 ""
f B "tx_buffer_bytes" 1 644 "int16()" `405 
f N "tx_buffer_bytes" 1 645 ""
v L "stream" 1 645 "int8" `407 
f G "tx_buffer_bytes" 1 645 "int16(int8 stream)" `406  "#use i2c() Prototypes:"
f N "i2c_read" 1 648 ""
f B "i2c_read" 1 648 "int8()" `408 
f N "i2c_read" 1 649 ""
v L "stream" 1 649 "int8" `410 
f G "i2c_read" 1 649 "int8(int8 stream)" `409 
f N "i2c_read" 1 650 ""
v L "stream" 1 650 "int8" `412 
v L "ack" 1 650 "int8" `413 
f G "i2c_read" 1 650 "int8(int8 stream,int8 ack)" `411 
f N "i2c_write" 1 651 ""
v L "data" 1 651 "int8" `415 
f B "i2c_write" 1 651 "int8(int8 data)" `414 
f N "i2c_write" 1 652 ""
v L "stream" 1 652 "int8" `417 
v L "data" 1 652 "int8" `418 
f G "i2c_write" 1 652 "int8(int8 stream,int8 data)" `416 
f N "i2c_start" 1 653 ""
f B "i2c_start" 1 653 "void()" `419 
f N "i2c_start" 1 654 ""
v L "stream" 1 654 "int8" `421 
f G "i2c_start" 1 654 "void(int8 stream)" `420 
f N "i2c_start" 1 655 ""
v L "stream" 1 655 "int8" `423 
v L "restart" 1 655 "int8" `424 
f G "i2c_start" 1 655 "void(int8 stream,int8 restart)" `422 
f N "i2c_stop" 1 656 ""
f B "i2c_stop" 1 656 "void()" `425 
f N "i2c_stop" 1 657 ""
v L "stream" 1 657 "int8" `427 
f G "i2c_stop" 1 657 "void(int8 stream)" `426 
f N "i2c_isr_state" 1 658 ""
f B "i2c_isr_state" 1 658 "int8()" `428 
f N "i2c_slaveaddr" 1 659 ""
v L "addr" 1 659 "int8" `430 
f B "i2c_slaveaddr" 1 659 "void(int8 addr)" `429 
f N "i2c_slaveaddr" 1 660 ""
v L "stream" 1 660 "int8" `432 
v L "addr" 1 660 "int8" `433 
f G "i2c_slaveaddr" 1 660 "void(int8 stream,int8 addr)" `431 
f N "i2c_poll" 1 661 ""
f B "i2c_poll" 1 661 "int8()" `434 
f N "i2c_poll" 1 662 ""
v L "stream" 1 662 "int8" `436 
f G "i2c_poll" 1 662 "int8(int8 stream)" `435 
f N "i2c_init" 1 663 ""
v L "baud" 1 663 "int32" `438 
f B "i2c_init" 1 663 "void(int32 baud)" `437 
f N "i2c_init" 1 664 ""
v L "stream" 1 664 "int8" `440 
v L "baud" 1 664 "int32" `441 
f G "i2c_init" 1 664 "void(int8 stream,int32 baud)" `439  "#use spi() Prototypes:"
f N "spi_xfer" 1 667 ""
f B "spi_xfer" 1 667 "int8()" `442 
f N "spi_xfer" 1 668 ""
f G "spi_xfer" 1 668 "int16()" `443 
f N "spi_xfer" 1 669 ""
f G "spi_xfer" 1 669 "int32()" `444 
f N "spi_xfer" 1 670 ""
v L "data" 1 670 "int8" `446 
f G "spi_xfer" 1 670 "int8(int8 data)" `445 
f N "spi_xfer" 1 671 ""
v L "data" 1 671 "int16" `448 
f G "spi_xfer" 1 671 "int16(int16 data)" `447 
f N "spi_xfer" 1 672 ""
v L "data" 1 672 "int32" `450 
f G "spi_xfer" 1 672 "int32(int32 data)" `449 
f N "spi_xfer" 1 673 ""
v L "stream" 1 673 "int8" `452 
v L "data" 1 673 "int8" `453 
f G "spi_xfer" 1 673 "int8(int8 stream,int8 data)" `451 
f N "spi_xfer" 1 674 ""
v L "stream" 1 674 "int8" `452 
v L "data" 1 674 "int16" `456 
f G "spi_xfer" 1 674 "int16(int8 stream,int16 data)" `454 
f N "spi_xfer" 1 675 ""
v L "stream" 1 675 "int8" `452 
v L "data" 1 675 "int32" `459 
f G "spi_xfer" 1 675 "int32(int8 stream,int32 data)" `457 
f N "spi_xfer" 1 676 ""
v L "stream" 1 676 "int8" `461 
v L "data" 1 676 "int8" `462 
v L "bits" 1 676 "int8" `463 
f G "spi_xfer" 1 676 "int8(int8 stream,int8 data,int8 bits)" `460 
f N "spi_xfer" 1 677 ""
v L "stream" 1 677 "int8" `461 
v L "data" 1 677 "int16" `462 
v L "bits" 1 677 "int8" `467 
f G "spi_xfer" 1 677 "int16(int8 stream,int16 data,int8 bits)" `464 
f N "spi_xfer" 1 678 ""
v L "stream" 1 678 "int8" `461 
v L "data" 1 678 "int32" `462 
v L "bits" 1 678 "int8" `471 
f G "spi_xfer" 1 678 "int32(int8 stream,int32 data,int8 bits)" `468 
f N "spi_init" 1 679 ""
v L "baud" 1 679 "int32" `473 
f B "spi_init" 1 679 "void(int32 baud)" `472 
f N "spi_init" 1 680 ""
v L "stream" 1 680 "int8" `475 
v L "baud" 1 680 "int32" `476 
f G "spi_init" 1 680 "void(int8 stream,int32 baud)" `474 
f N "spi_speed" 1 681 ""
v L "baud" 1 681 "int32" `478 
f B "spi_speed" 1 681 "void(int32 baud)" `477 
f N "spi_speed" 1 682 ""
v L "stream" 1 682 "int8" `480 
v L "baud" 1 682 "int32" `481 
f G "spi_speed" 1 682 "void(int8 stream,int32 baud)" `479 
f N "spi_speed" 1 683 ""
v L "stream" 1 683 "int8" `483 
v L "baud" 1 683 "int32" `484 
v L "clock" 1 683 "int32" `485 
f G "spi_speed" 1 683 "void(int8 stream,int32 baud,int32 clock)" `482 
f N "spi_prewrite" 1 684 ""
v L "data" 1 684 "int8" `487 
f B "spi_prewrite" 1 684 "void(int8 data)" `486 
f N "spi_prewrite" 1 685 ""
v L "data" 1 685 "int16" `489 
f G "spi_prewrite" 1 685 "void(int16 data)" `488 
f N "spi_prewrite" 1 686 ""
v L "data" 1 686 "int32" `491 
f G "spi_prewrite" 1 686 "void(int32 data)" `490 
f N "spi_prewrite" 1 687 ""
v L "??65535" 1 687 "int8" `493 
v L "data" 1 687 "int8" `494 
f G "spi_prewrite" 1 687 "void(int8 ,int8 data)" `492 
f N "spi_prewrite" 1 688 ""
v L "??65535" 1 688 "int8" `493 
v L "data" 1 688 "int16" `497 
f G "spi_prewrite" 1 688 "void(int8 ,int16 data)" `495 
f N "spi_prewrite" 1 689 ""
v L "??65535" 1 689 "int8" `493 
v L "data" 1 689 "int32" `500 
f G "spi_prewrite" 1 689 "void(int8 ,int32 data)" `498 
f N "spi_xfer_in" 1 690 ""
f B "spi_xfer_in" 1 690 "int8()" `501 
f N "spi_xfer_in" 1 691 ""
f G "spi_xfer_in" 1 691 "int16()" `502 
f N "spi_xfer_in" 1 692 ""
f G "spi_xfer_in" 1 692 "int32()" `503 
f N "spi_xfer_in" 1 693 ""
v L "bits" 1 693 "int8" `505 
f G "spi_xfer_in" 1 693 "int8(int8 bits)" `504 
f N "spi_xfer_in" 1 694 ""
v L "bits" 1 694 "int8" `507 
f G "spi_xfer_in" 1 694 "int16(int8 bits)" `506 
f N "spi_xfer_in" 1 695 ""
v L "bits" 1 695 "int8" `509 
f G "spi_xfer_in" 1 695 "int32(int8 bits)" `508 
f N "spi_xfer_in" 1 696 ""
v L "stream" 1 696 "int8" `511 
v L "bits" 1 696 "int8" `512 
f G "spi_xfer_in" 1 696 "int8(int8 stream,int8 bits)" `510 
f N "spi_xfer_in" 1 697 ""
v L "stream" 1 697 "int8" `511 
v L "bits" 1 697 "int8" `515 
f G "spi_xfer_in" 1 697 "int16(int8 stream,int8 bits)" `513 
f N "spi_xfer_in" 1 698 ""
v L "stream" 1 698 "int8" `511 
v L "bits" 1 698 "int8" `518 
f G "spi_xfer_in" 1 698 "int32(int8 stream,int8 bits)" `516  "#use rtos() Prototypes:"
f N "rtos_run" 1 701 ""
f B "rtos_run" 1 701 "void()" `519 
f N "rtos_yield" 1 702 ""
f B "rtos_yield" 1 702 "void()" `520 
f N "rtos_enable" 1 703 ""
v L "task" 1 703 "int8" `522 
f B "rtos_enable" 1 703 "void(int8 task)" `521 
f N "rtos_disable" 1 704 ""
v L "task" 1 704 "int8" `524 
f B "rtos_disable" 1 704 "void(int8 task)" `523 
f N "rtos_terminate" 1 705 ""
f B "rtos_terminate" 1 705 "void()" `525 
f N "rtos_await" 1 706 ""
v L "flag" 1 706 "int8" `527 
f B "rtos_await" 1 706 "void(int8 flag)" `526 
f N "rtos_wait" 1 707 ""
v L "sem" 1 707 "int8" `529 
f B "rtos_wait" 1 707 "void(int8 sem)" `528 
f N "rtos_signal" 1 708 ""
v L "sem" 1 708 "int8" `531 
f B "rtos_signal" 1 708 "void(int8 sem)" `530 
f N "rtos_msg_send" 1 709 ""
v L "task" 1 709 "int8" `533 
v L "msg" 1 709 "int8" `534 
f B "rtos_msg_send" 1 709 "void(int8 task,int8 msg)" `532 
f N "rtos_msg_read" 1 710 ""
f B "rtos_msg_read" 1 710 "int8()" `535 
f N "rtos_msg_poll" 1 711 ""
f B "rtos_msg_poll" 1 711 "int8()" `536 
f N "rtos_overrun" 1 712 ""
v L "task" 1 712 "int8" `538 
f B "rtos_overrun" 1 712 "int8(int8 task)" `537 
f N "rtos_stats" 1 713 ""
v L "task" 1 713 "int8" `540 
v L "stat" 1 713 "*int8" `541 
f B "rtos_stats" 1 713 "void(int8 task,*int8 stat)" `539  "#use timer() Prototypes:"
f N "get_ticks" 1 716 ""
f B "get_ticks" 1 716 "int8()" `542 
f N "get_ticks" 1 717 ""
f G "get_ticks" 1 717 "int16()" `543 
f N "get_ticks" 1 718 ""
f G "get_ticks" 1 718 "int32()" `544 
f N "get_ticks" 1 719 ""
v L "stream" 1 719 "int8" `546 
f G "get_ticks" 1 719 "int8(int8 stream)" `545 
f N "get_ticks" 1 720 ""
v L "stream" 1 720 "int8" `548 
f G "get_ticks" 1 720 "int16(int8 stream)" `547 
f N "get_ticks" 1 721 ""
v L "stream" 1 721 "int8" `550 
f G "get_ticks" 1 721 "int32(int8 stream)" `549 
f N "set_ticks" 1 722 ""
v L "value" 1 722 "int8" `552 
f B "set_ticks" 1 722 "void(int8 value)" `551 
f N "set_ticks" 1 723 ""
v L "value" 1 723 "int16" `554 
f G "set_ticks" 1 723 "void(int16 value)" `553 
f N "set_ticks" 1 724 ""
v L "value" 1 724 "int32" `556 
f G "set_ticks" 1 724 "void(int32 value)" `555 
f N "set_ticks" 1 725 ""
v L "stream" 1 725 "int8" `558 
v L "value" 1 725 "int8" `559 
f G "set_ticks" 1 725 "void(int8 stream,int8 value)" `557 
f N "set_ticks" 1 726 ""
v L "stream" 1 726 "int8" `558 
v L "value" 1 726 "int16" `562 
f G "set_ticks" 1 726 "void(int8 stream,int16 value)" `560 
f N "set_ticks" 1 727 ""
v L "stream" 1 727 "int8" `558 
v L "value" 1 727 "int32" `565 
f G "set_ticks" 1 727 "void(int8 stream,int32 value)" `563  "#use pwm() Prototypes:"
f N "pwm_on" 1 730 ""
f B "pwm_on" 1 730 "void()" `566 
f N "pwm_on" 1 731 ""
v L "stream" 1 731 "int8" `568 
f G "pwm_on" 1 731 "void(int8 stream)" `567 
f N "pwm_off" 1 732 ""
f B "pwm_off" 1 732 "void()" `569 
f N "pwm_off" 1 733 ""
v L "stream" 1 733 "int8" `571 
f G "pwm_off" 1 733 "void(int8 stream)" `570 
f N "pwm_set_duty" 1 734 ""
v L "duty" 1 734 "int16" `573 
f B "pwm_set_duty" 1 734 "void(int16 duty)" `572 
f N "pwm_set_duty" 1 735 ""
v L "stream" 1 735 "int8" `575 
v L "duty" 1 735 "int16" `576 
f G "pwm_set_duty" 1 735 "void(int8 stream,int16 duty)" `574 
f N "pwm_set_duty_percent" 1 736 ""
v L "percent" 1 736 "int16" `578 
f B "pwm_set_duty_percent" 1 736 "void(int16 percent)" `577 
f N "pwm_set_duty_percent" 1 737 ""
v L "stream" 1 737 "int8" `580 
v L "percent" 1 737 "int16" `581 
f G "pwm_set_duty_percent" 1 737 "void(int8 stream,int16 percent)" `579 
f N "pwm_set_frequency" 1 738 ""
v L "frequency" 1 738 "int32" `583 
f B "pwm_set_frequency" 1 738 "void(int32 frequency)" `582 
f N "pwm_set_frequency" 1 739 ""
v L "stream" 1 739 "int8" `585 
v L "frequency" 1 739 "int32" `586 
f G "pwm_set_frequency" 1 739 "void(int8 stream,int32 frequency)" `584  "#use capture() Prototypes:"
f N "get_capture_time" 1 742 ""
f B "get_capture_time" 1 742 "int16()" `587 
f N "get_capture_time" 1 743 ""
v L "stream" 1 743 "int8" `589 
f G "get_capture_time" 1 743 "int16(int8 stream)" `588 
f N "get_capture_event" 1 744 ""
f B "get_capture_event" 1 744 "int8()" `590 
f N "get_capture_event" 1 745 ""
v L "stream" 1 745 "int8" `592 
f G "get_capture_event" 1 745 "int8(int8 stream)" `591  "Enviroment Prototypes:"
c L "get_capture_event" 1 3 2 "FUNCTION"
f N "goto_address" 1 758 ""
v L "address" 1 758 "int16" `594 
f B "goto_address" 1 758 "void(int16 address)" `593 
f N "label_address" 1 759 ""
v L "label" 1 759 "int16" `596 
f B "label_address" 1 759 "int16(int16 label)" `595  "Program Memory Prototypes:"
f N "read_program_memory" 1 762 ""
v L "address" 1 762 "int16" `598 
v L "dataptr" 1 762 "*int8" `599 
v L "count" 1 762 "int16" `600 
f B "read_program_memory" 1 762 "void(int16 address,*int8 dataptr,int16 count)" `597 
f N "read_program_eeprom" 1 763 ""
v L "address" 1 763 "int16" `602 
f B "read_program_eeprom" 1 763 "int16(int16 address)" `601 
f N "erase_program_eeprom" 1 764 ""
v L "address" 1 764 "int16" `604 
f B "erase_program_eeprom" 1 764 "void(int16 address)" `603 
f N "write_program_memory" 1 765 ""
v L "address" 1 765 "int16" `606 
v L "dataptr" 1 765 "*int8" `607 
v L "count" 1 765 "int16" `608 
f B "write_program_memory" 1 765 "void(int16 address,*int8 dataptr,int16 count)" `605 
f N "write_program_eeprom" 1 766 ""
v L "address" 1 766 "int16" `610 
v L "data" 1 766 "int16" `611 
f B "write_program_eeprom" 1 766 "void(int16 address,int16 data)" `609  "EEPROM Prototypes:"
t G "__EEADDRESS__" 1 771 "int16" `612 
f N "read_eeprom" 1 776 ""
v L "address" 1 776 "__EEADDRESS__" `614 
f B "read_eeprom" 1 776 "int8(__EEADDRESS__ address)" `613 
f N "write_eeprom" 1 777 ""
v L "address" 1 777 "__EEADDRESS__" `616 
v L "value" 1 777 "int8" `617 
f B "write_eeprom" 1 777 "void(__EEADDRESS__ address,int8 value)" `615  "INT"
c L "write_eeprom" 1 3 4 "FUNCTION"
f N "enable_interrupts" 1 784 ""
v L "interrupt" 1 784 "int32" `619 
f B "enable_interrupts" 1 784 "void(int32 interrupt)" `618 
f N "disable_interrupts" 1 785 ""
v L "interrupt" 1 785 "int32" `621 
f B "disable_interrupts" 1 785 "void(int32 interrupt)" `620 
f N "clear_interrupt" 1 786 ""
v L "interrupt" 1 786 "int32" `623 
f B "clear_interrupt" 1 786 "void(int32 interrupt)" `622 
f N "interrupt_active" 1 787 ""
v L "interrupt" 1 787 "int32" `625 
f B "interrupt_active" 1 787 "int8(int32 interrupt)" `624 
f N "interrupt_enabled" 1 788 ""
v L "interrupt" 1 788 "int32" `627 
f B "interrupt_enabled" 1 788 "int8(int32 interrupt)" `626 
f N "ext_int_edge" 1 789 ""
v L "source" 1 789 "int8" `629 
v L "edge" 1 789 "int8" `630 
f B "ext_int_edge" 1 789 "void(int8 source,int8 edge)" `628 
f N "jump_to_isr" 1 790 ""
v L "address" 1 790 "int16" `632 
f B "jump_to_isr" 1 790 "void(int16 address)" `631  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 792 "0x40"
d G "H_TO_L" 1 793 "0"
d G "GLOBAL" 1 795 "0xF2C0"
d G "PERIPH" 1 796 "0xF240"
d G "INT_RTCC" 1 797 "0x00F220"
d G "INT_TIMER0" 1 798 "0x00F220"
d G "INT_TIMER1" 1 799 "0x009D01"
d G "INT_TIMER2" 1 800 "0x009D02"
d G "INT_TIMER3" 1 801 "0x00A002"
d G "INT_EXT_L2H" 1 802 "0x5000F210"
d G "INT_EXT_H2L" 1 803 "0x6000F210"
d G "INT_EXT" 1 804 "0x00F210"
d G "INT_EXT1_L2H" 1 805 "0x5001F008"
d G "INT_EXT1_H2L" 1 806 "0x6001F008"
d G "INT_EXT1" 1 807 "0x00F008"
d G "INT_EXT2_L2H" 1 808 "0x5002F010"
d G "INT_EXT2_H2L" 1 809 "0x6002F010"
d G "INT_EXT2" 1 810 "0x00F010"
d G "INT_RB" 1 811 "0x01FFF208"
d G "INT_AD" 1 812 "0x009D40"
d G "INT_RDA" 1 813 "0x009D20"
d G "INT_TBE" 1 814 "0x009D10"
d G "INT_SSP" 1 815 "0x009D08"
d G "INT_CCP1" 1 816 "0x009D04"
d G "INT_CCP2" 1 817 "0x00A001"
d G "INT_BUSCOL" 1 818 "0x00A008"
d G "INT_LOWVOLT" 1 819 "0x00A004"
d G "INT_COMP" 1 820 "0x00A040"
d G "INT_EEPROM" 1 821 "0x00A010"
d G "INT_OSCF" 1 822 "0x00A080"
d G "INT_COMP2" 1 823 "0x00A020"
d G "INT_RB0" 1 824 "0x101F208"
d G "INT_RB1" 1 825 "0x102F208"
d G "INT_RB2" 1 826 "0x104F208"
d G "INT_RB3" 1 827 "0x108F208"
d G "INT_RB4" 1 828 "0x110F208"
d G "INT_RB5" 1 829 "0x120F208"
d G "INT_RB6" 1 830 "0x140F208"
d G "INT_RB7" 1 831 "0x180F208"
D G "LCD_DB4" 2 7 "PIN_B0"
D G "LCD_DB5" 2 8 "PIN_B1"
D G "LCD_DB6" 2 9 "PIN_B2"
D G "LCD_DB7" 2 10 "PIN_B3"
D G "LCD_RS" 2 12 "PIN_B4"
D G "LCD_RW" 2 13 "0" "PIN_B5 // 0"
D G "LCD_E" 2 14 "PIN_B6" "No hay problema con el ICP"
D G "lcd_type" 2 24 "2" "0=5x7, 1=5x10, 2=2 lines"
D G "lcd_line_two" 2 25 "0x40" "LCD RAM address for the 2nd line"
V G "LCD_INIT_STRING" 2 28 "[4]" `637 
C L "jump_to_isr" 2 1 1 "FUNCTION"
C L "jump_to_isr" 2 1 1 "FUNCTION"
C L "jump_to_isr" 2 1 1 "FUNCTION"
C L "jump_to_isr" 2 1 1 "FUNCTION"
F N "lcd_send_nibble" 2 38 ""
V L "nibble" 2 38 "int8" `641 
F G "lcd_send_nibble" 2 39 "void(int8 nibble)" `640  "Note:  !! converts an integer expression"
C L "lcd_send_nibble" 2 1 1 "FUNCTION"
C L "lcd_send_byte" 2 1 6 "FUNCTION"
F N "lcd_send_byte" 2 108 ""
V L "address" 2 108 "int8" `643 
V L "n" 2 108 "int8" `644 
F G "lcd_send_byte" 2 109 "void(int8 address,int8 n)" `642 
F N "lcd_init" 2 137 ""
F G "lcd_init" 2 138 "void()" `645 
V L "i" 2 139 "int8" `646 
C L "lcd_init" 2 1 6 "FUNCTION"
F N "lcd_gotoxy" 2 178 ""
V L "x" 2 178 "int8" `648 
V L "y" 2 178 "int8" `649 
F G "lcd_gotoxy" 2 179 "void(int8 x,int8 y)" `647 
V L "address" 2 180 "int8" `650 
F N "lcd_putc" 2 192 ""
V L "c" 2 192 "int8" `652 
F G "lcd_putc" 2 193 "void(int8 c)" `651 
F N "lcd_setcursor_vb" 2 234 ""
V L "visible" 2 234 "int8" `654 
V L "blink" 2 234 "int8" `655 
F G "lcd_setcursor_vb" 2 234 "void(int8 visible,int8 blink)" `653 
C L "Temperatura" 3 2 13 "FUNCTION"
F N "Temperatura" 3 23 ""
F G "Temperatura" 3 23 "float()" `656 
D G "CS" 3 25 "PIN_A2"
V L "Temp16Bits" 3 27 "sint16" `657 
V L "Templ" 3 28 "int8" `658 
V L "Temph" 3 29 "int8" `659 
V L "decimales" 3 30 "float" `660 
V L "enteros" 3 31 "float" `661 
V L "Temp" 3 32 "float" `662 
C L "Temperatura" 3 2 12 "FUNCTION"
C L "Temperatura" 3 2 1 "FUNCTION"
C L "Temperatura" 3 2 1 "FUNCTION"
C L "Temperatura" 3 2 1 "FUNCTION"
C L "Temperatura" 3 2 1 "FUNCTION"
C L "Temperatura" 3 2 1 "FUNCTION"
C L "Temperatura" 3 2 1 "FUNCTION"
V G "ANO" 0 20 "int8" `675 
F N "MAIN" 0 22 ""
F G "MAIN" 0 22 "void()" `676 
C L "MAIN" 0 9 1 "FUNCTION"
C L "MAIN" 0 9 1 "FUNCTION"
C L "MAIN" 0 9 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_e" 0 0
F B "set_slow_slew_a" 1 0
F B "set_slow_slew_b" 1 0
F B "set_slow_slew_c" 1 0
F B "set_slow_slew_e" 1 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
